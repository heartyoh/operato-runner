# Task ID: 4
# Title: Implement VenvExecutor
# Status: pending
# Dependencies: 1, 2
# Priority: medium
# Description: Create the VenvExecutor that runs Python code in isolated virtual environments.
# Details:
Implement the VenvExecutor class that runs code in Python virtual environments:

```python
import os
import subprocess
import tempfile
import json
import time
from typing import Dict, Any
from .executor import Executor
from .models import ExecRequest, ExecResult

class VenvExecutor(Executor):
    def __init__(self, venv_path="./venvs"):
        self.venv_path = venv_path
        os.makedirs(venv_path, exist_ok=True)
    
    async def validate(self, module_name: str) -> bool:
        # Check if module exists and is of type 'venv'
        # Also verify the venv exists
        venv_dir = os.path.join(self.venv_path, module_name)
        return os.path.exists(venv_dir)
    
    async def execute(self, request: ExecRequest) -> ExecResult:
        start_time = time.time()
        module_name = request.module
        venv_dir = os.path.join(self.venv_path, module_name)
        
        # Create temporary file for input JSON
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as input_file:
            json.dump(request.input_json, input_file)
            input_path = input_file.name
        
        # Create temporary file for output
        output_path = tempfile.mktemp(suffix='.json')
        
        # Get module path from registry
        module_path = ""  # Placeholder, will come from ModuleRegistry
        
        # Prepare the Python command to run in the venv
        if os.name == 'nt':  # Windows
            python_bin = os.path.join(venv_dir, 'Scripts', 'python.exe')
        else:  # Unix/Linux
            python_bin = os.path.join(venv_dir, 'bin', 'python')
        
        # Command to execute the module
        cmd = [
            python_bin,
            '-c',
            f"import json; import sys; sys.path.append('{os.path.dirname(module_path)}'); "
            f"from {os.path.basename(module_path).replace('.py', '')} import handler; "
            f"with open('{input_path}', 'r') as f: input_data = json.load(f); "
            f"result = handler(input_data); "
            f"with open('{output_path}', 'w') as f: json.dump(result, f)"
        ]
        
        try:
            # Execute the command
            process = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60  # 1 minute timeout
            )
            
            # Read the output
            if os.path.exists(output_path):
                with open(output_path, 'r') as f:
                    result_json = json.load(f)
            else:
                result_json = {}
                
            exit_code = process.returncode
            stderr = process.stderr
            stdout = process.stdout
            
        except subprocess.TimeoutExpired:
            exit_code = 124  # Standard timeout exit code
            stderr = "Execution timed out after 60 seconds"
            stdout = ""
            result_json = {}
        except Exception as e:
            exit_code = 1
            stderr = f"Error executing module: {str(e)}"
            stdout = ""
            result_json = {}
        finally:
            # Clean up temporary files
            if os.path.exists(input_path):
                os.unlink(input_path)
            if os.path.exists(output_path):
                os.unlink(output_path)
        
        duration = time.time() - start_time
        
        return ExecResult(
            result_json=result_json,
            exit_code=exit_code,
            stderr=stderr,
            stdout=stdout,
            duration=duration
        )
    
    async def cleanup(self) -> None:
        # Nothing to do for cleanup in this implementation
        # Could add venv cleanup logic if needed
        pass
        
    @property
    def executor_type(self) -> str:
        return "venv"
```

This implementation assumes that virtual environments are pre-created for each module. You may want to add functionality to create venvs on-demand and install requirements.

# Test Strategy:
Write integration tests to verify:
1. Execution in isolated virtual environments
2. Proper handling of dependencies within the venv
3. Correct passing of input/output between main process and venv
4. Timeout handling for long-running processes
5. Error handling for missing venvs or modules
6. Resource cleanup after execution
