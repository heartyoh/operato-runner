# Task ID: 14
# Title: Implement Authentication and Authorization
# Status: pending
# Dependencies: 7, 8
# Priority: medium
# Description: Add authentication and authorization to the REST and gRPC APIs to secure access to the system.
# Details:
Implement authentication and authorization for the REST API using JWT tokens:

```python
from fastapi import FastAPI, HTTPException, Depends, Security
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from jose import jwt, JWTError
from pydantic import BaseModel
from typing import Optional, List, Dict, Any
import os
from datetime import datetime, timedelta

# Models
class Token(BaseModel):
    access_token: str
    token_type: str

class TokenData(BaseModel):
    username: Optional[str] = None
    scopes: List[str] = []

class User(BaseModel):
    username: str
    disabled: Optional[bool] = None
    scopes: List[str] = []

# Configuration
SECRET_KEY = os.getenv("JWT_SECRET_KEY", "your-secret-key")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30

# Security
security = HTTPBearer()

# Fake user database for demonstration
fake_users_db = {
    "admin": {
        "username": "admin",
        "password": "password",  # In production, use hashed passwords
        "disabled": False,
        "scopes": ["modules:read", "modules:write", "execute:all"]
    },
    "user": {
        "username": "user",
        "password": "password",
        "disabled": False,
        "scopes": ["modules:read", "execute:limited"]
    }
}

# Functions
def create_access_token(data: dict, expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.utcnow() + expires_delta
    else:
        expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt

async def get_current_user(credentials: HTTPAuthorizationCredentials = Security(security)):
    credentials_exception = HTTPException(
        status_code=401,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    try:
        token = credentials.credentials
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get("sub")
        if username is None:
            raise credentials_exception
        token_scopes = payload.get("scopes", [])
        token_data = TokenData(username=username, scopes=token_scopes)
    except JWTError:
        raise credentials_exception
    user = fake_users_db.get(token_data.username)
    if user is None:
        raise credentials_exception
    return User(username=user["username"], disabled=user["disabled"], scopes=user["scopes"])

async def get_current_active_user(current_user: User = Depends(get_current_user)):
    if current_user.disabled:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user

def has_scope(required_scope: str):
    async def _has_scope(current_user: User = Depends(get_current_active_user)):
        if required_scope not in current_user.scopes:
            raise HTTPException(
                status_code=403,
                detail=f"Not enough permissions. Required scope: {required_scope}"
            )
        return current_user
    return _has_scope

# API routes
@app.post("/token", response_model=Token)
async def login_for_access_token(username: str, password: str):
    user = fake_users_db.get(username)
    if not user or user["password"] != password:  # In production, use proper password verification
        raise HTTPException(
            status_code=401,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    access_token = create_access_token(
        data={"sub": user["username"], "scopes": user["scopes"]},
        expires_delta=access_token_expires
    )
    return {"access_token": access_token, "token_type": "bearer"}

# Secure the existing endpoints
@app.get("/modules", response_model=List[ModuleResponse])
async def list_modules(
    current_user: User = Depends(has_scope("modules:read")),
    module_registry: ModuleRegistry = Depends(get_module_registry)
):
    modules = module_registry.list_modules()
    return [
        ModuleResponse(
            name=m.name,
            env=m.env,
            version=m.version,
            created_at=m.created_at.isoformat(),
            tags=m.tags
        ) for m in modules
    ]

@app.post("/modules", response_model=ModuleResponse, status_code=201)
async def create_module(
    module_data: ModuleCreate,
    current_user: User = Depends(has_scope("modules:write")),
    module_registry: ModuleRegistry = Depends(get_module_registry)
):
    # Implementation remains the same
    ...

@app.post("/run/{module}", response_model=RunResponse)
async def run_module(
    module: str,
    request: RunRequest = Body(...),
    current_user: User = Depends(has_scope("execute:all")),  # Or check for specific module permissions
    executor_manager: ExecutorManager = Depends(get_executor_manager)
):
    # Implementation remains the same
    ...
```

For gRPC, implement authentication using interceptors:

```python
import grpc
from jose import jwt, JWTError
from typing import Dict, Any, Callable

# Configuration (should be shared with REST API)
SECRET_KEY = "your-secret-key"
ALGORITHM = "HS256"

class AuthInterceptor(grpc.ServerInterceptor):
    def __init__(self):
        def abort(ignored_request, context):
            context.abort(grpc.StatusCode.UNAUTHENTICATED, "Invalid or missing token")
        
        self._abort_handler = grpc.unary_unary_rpc_method_handler(abort)
    
    def intercept_service(self, continuation, handler_call_details):
        # Extract metadata
        metadata = dict(handler_call_details.invocation_metadata)
        
        # Check for authorization header
        auth_header = metadata.get("authorization", "")
        if not auth_header.startswith("Bearer "):
            return self._abort_handler
        
        # Extract and validate token
        token = auth_header[7:]  # Remove "Bearer " prefix
        try:
            payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
            # Add user info to context for later use
            context = grpc.ServicerContext()
            context.user = payload
            # Continue with the RPC
            return continuation(handler_call_details)
        except JWTError:
            return self._abort_handler

# Update the gRPC server creation
def serve(module_registry, executor_manager, port=50051):
    server = grpc.aio.server(
        futures.ThreadPoolExecutor(max_workers=10),
        interceptors=[AuthInterceptor()]
    )
    executor_pb2_grpc.add_ExecutorServicer_to_server(
        ExecutorServicer(module_registry, executor_manager),
        server
    )
    server.add_insecure_port(f'[::]:{port}')
    return server
```

This implementation provides basic authentication and authorization for both REST and gRPC APIs using JWT tokens. For the REST API, it uses FastAPI's dependency injection system to secure endpoints with scopes. For gRPC, it uses interceptors to validate tokens before processing requests.

# Test Strategy:
Write integration tests to verify:
1. Token generation and validation
2. Access control based on scopes
3. Rejection of invalid or expired tokens
4. Proper error responses for unauthorized requests
5. Integration with both REST and gRPC APIs
